<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Blog iGitScor - développement Web et mobile</description>
    <link>http://iscor.me/</link>
    <atom:link href="http://iscor.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 09 Jun 2016 23:09:03 +0200</pubDate>
    <lastBuildDate>Thu, 09 Jun 2016 23:09:03 +0200</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>How to migrate front technologies</title>
        <description>&lt;h1 id=&quot;briefing&quot;&gt;Briefing&lt;/h1&gt;

&lt;p&gt;There were no huge specifications for this project because it was an iterative project using the Scrum method. The need of the site was reduced to a small site, but very inviting with the logic LEAN UX, including search, listings and product sheets. Plus the fact to keep in mind that the site will be expanded at a later stage. The site had to be mobile friendly.&lt;/p&gt;

&lt;p&gt;The main complex problem was to include a sub module into the new site. The fact is, the two projects didn’t have the same tech stack.&lt;/p&gt;

&lt;h2 id=&quot;concrete-case&quot;&gt;Concrete case&lt;/h2&gt;

&lt;p&gt;Here are the migration technologies details.
The submodule has the following stack :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bootstrap&lt;/li&gt;
  &lt;li&gt;Symfony&lt;/li&gt;
  &lt;li&gt;Less&lt;/li&gt;
  &lt;li&gt;Selenium IDE functional tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And the new website is developed with these technology choices :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ITCSS with Bootstrap 4 grid&lt;/li&gt;
  &lt;li&gt;Symfony&lt;/li&gt;
  &lt;li&gt;Sass&lt;/li&gt;
  &lt;li&gt;Nightwatch.js automated testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;migration&quot;&gt;Migration&lt;/h1&gt;

&lt;h2 id=&quot;template-migration&quot;&gt;Template migration&lt;/h2&gt;

&lt;p&gt;First of all migrations, the template was the first thing to migrate. Even if the two environments are coded in Twig,
the principal problem was the CSS framework change. Even if the grid is the same component (the bootstrap one), some utility classes are different.&lt;/p&gt;

&lt;h2 id=&quot;style-migration&quot;&gt;Style migration&lt;/h2&gt;

&lt;p&gt;The second big impact was the change of the preprocessor. I use SCSS which is compiled with node-sass, the compilation will be described later in the webpack part. In the submodule, all the style is written in less.&lt;/p&gt;

&lt;h3 id=&quot;the-new-project-architecture&quot;&gt;The new project architecture&lt;/h3&gt;

&lt;p&gt;My SCSS is split up in different files or so called Sass partials. Working with Sass partials makes it more flexible and easier to maintain. Working like this is a way to keep a good overview on things which makes it more efficient to maintain.&lt;/p&gt;

&lt;p&gt;I split things up like this :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/itcss.png&quot; alt=&quot;ITCSS structure&quot; aria-label=&quot;Assets + Scripts, Settings, Tools, Generic, Elements, Objects, Components and Trumps&quot; class=&quot;center-block img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; CSS file is &lt;code class=&quot;highlighter-rouge&quot;&gt;styles.scss&lt;/code&gt;. The only lines of code, in this file, imports the other files. Example :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*------------------------------------*\
&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;#SETTINGS
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;------------------------------------&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*/&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;01-Settings/colors&#39;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;01-Settings/typography&#39;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;01-Settings/spacing&#39;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;01-Settings/responsive&#39;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*------------------------------------*\
&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;#TOOLS
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;------------------------------------&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*/&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;02-Tools/mixins&#39;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;02-Tools/functions&#39;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;02-Tools/responsive&#39;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;02-Tools/images&#39;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;02-Tools/animations&#39;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;02-Tools/transitions&#39;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve chosen the &lt;strong&gt;7-1 pattern&lt;/strong&gt; approach, but I include manually all the parts because some of them are environment dependencies.&lt;/p&gt;

&lt;h3 id=&quot;the-old-project-approach&quot;&gt;The old project approach&lt;/h3&gt;

&lt;p&gt;I won’t describe the old structure, but how I migrate less components in the sass structure.&lt;/p&gt;

&lt;p&gt;The first step was to extract the leanest part of the sass-framework to include it in the submodule. After that, the approach was to integrate less part as a component or trump in the new sass style for the submodule.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*------------------------------------*\
&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;#COMPONENTS
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;------------------------------------&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*/&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;06-Components/payment-block&#39;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;The main reason for success is to not stop at the first failure display, due to pixel-perfect design !&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;bundle-webpack&quot;&gt;Bundle webpack&lt;/h2&gt;

&lt;p&gt;Creation of a webpack bundle permits to migrate step by step.&lt;/p&gt;

&lt;p&gt;The main files are located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;00-Assets&lt;/code&gt; folder.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Load internationalization library&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;I18N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./i18n&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Instanciate translator&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;translator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;I18N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Translate the document&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;translator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;I18N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;french&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With &lt;em&gt;webpack-loader&lt;/em&gt;, the migration is easier to do. In fact, I used less-loader and sass-loader to combine old and new components. At the end of the migration, I removed useless loaders.&lt;/p&gt;

&lt;p&gt;After style migration, the javascript logic was all integrated in the webpack flow, step by step (or component by component). Plus the fact that the webpack tests code quality, I also fixed some code styling and not optimized code.&lt;/p&gt;

&lt;h2 id=&quot;functional-tests&quot;&gt;Functional tests&lt;/h2&gt;

&lt;p&gt;Another big change was to migrate from &lt;em&gt;Selenium static tests&lt;/em&gt; to an automated test process (with Nightwatch.js)&lt;/p&gt;

&lt;p&gt;I used a node module to convert static Selenium test case to javascript test case. I adapted them to load common configuration and not repeat behavior.&lt;/p&gt;

&lt;h1 id=&quot;environments&quot;&gt;Environments&lt;/h1&gt;

&lt;p&gt;In webpack, one of the most important problem is to have multiple environments. I split the configuration into 3 parts :&lt;/p&gt;

&lt;h2 id=&quot;common-environment&quot;&gt;Common environment&lt;/h2&gt;

&lt;p&gt;In the common part, we can retrieve common webpack plugins and specific configuration (shared between environments)&lt;/p&gt;

&lt;h2 id=&quot;production-environment&quot;&gt;Production environment&lt;/h2&gt;

&lt;p&gt;In this case, I minify assets, compress and upload them to an Amazon S3 instance.&lt;/p&gt;

&lt;h2 id=&quot;development-environment&quot;&gt;Development environment&lt;/h2&gt;

&lt;p&gt;In this case, I don’t minify assets and use the dev version of the webpack bundle asset. I also add watch mode (for Docker or Vagrant issue) to be focused on the code.&lt;/p&gt;

&lt;p&gt;I also generate automatically a styleguide directly with dev source code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/styleguide_index.png&quot; alt=&quot;Styleguide menu&quot; /&gt;
&lt;img src=&quot;/assets/images/styleguide_example.png&quot; alt=&quot;Styleguide example&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;github&quot;&gt;Github&lt;/h1&gt;

&lt;p&gt;Go to the demonstration repo for a code example. All of them will be updated all along my researches so you can use them as project dependencies.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;btn btn-link btn-block&quot; href=&quot;https://github.com/iGitScor/how-to-migrate-front&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Fork it&quot;&gt;
    &lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt; Fork it
  &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also contribute to it by &lt;strong&gt;forking the project&lt;/strong&gt; and make a pull request ;-)&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Jun 2016 00:00:00 +0200</pubDate>
        <link>http://iscor.me/how-to-migrate-front-technologies</link>
        <guid isPermaLink="true">http://iscor.me/how-to-migrate-front-technologies</guid>
        
        <category>front</category>
        
        <category>migration</category>
        
        <category>webpack</category>
        
        <category>web performance</category>
        
        
        <category>technical</category>
        
      </item>
    
      <item>
        <title>UX Workshop</title>
        <description>&lt;h1 id=&quot;april---workshop-month&quot;&gt;April - Workshop month&lt;/h1&gt;

&lt;p&gt;During weeks, I went to workshops about user experience or front-end development… and I learned a lot !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/intro_flupa.jpg&quot; alt=&quot;FLUPA Workshop&quot; class=&quot;center-block img-fluid&quot; /&gt;&lt;/p&gt;
&lt;legend class=&quot;mark text-xs-center&quot;&gt;User experience workshop presentation&lt;/legend&gt;

&lt;h2 id=&quot;ux-design&quot;&gt;UX Design&lt;/h2&gt;

&lt;p&gt;The first workshop lasted the 6th of April.&lt;/p&gt;

&lt;h3 id=&quot;context&quot;&gt;Context&lt;/h3&gt;

&lt;p&gt;Based on the &lt;strong&gt;&lt;a href=&quot;https://www.amazon.com/M%C3%A9thodes-design-fondamentales-concevoir-interactifs-ebook/dp/B017OFZQMU&quot; target=&quot;_blank&quot;&gt;Carine Lallemand’s book&lt;/a&gt;&lt;/strong&gt;, we initiated passionate about user testing.&lt;/p&gt;

&lt;p&gt;Carine Lallemand is a :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;post-doc UX Researcher at &lt;em&gt;&lt;a href=&quot;https://twitter.com/uni_lu&quot; target=&quot;_blank&quot;&gt;@uni_lu&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;member board for &lt;em&gt;&lt;a href=&quot;http://flupa.eu/&quot; target=&quot;_blank&quot;&gt;@FLUPA (French UX professionals’ association)&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;UX designer/speaker/trainer&lt;/li&gt;
  &lt;li&gt;Co-author of “Méthodes de design UX”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You can follow her &lt;em&gt;&lt;a href=&quot;https://twitter.com/Carilall&quot; target=&quot;_blank&quot;&gt;on Twitter&lt;/a&gt;&lt;/em&gt; or see her at UX conferences.&lt;/p&gt;

&lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;

&lt;p&gt;The session was split into 3 interviews. I’ll describe each test in the following paragraphs.&lt;/p&gt;

&lt;h4 id=&quot;exploratory-survey&quot;&gt;Exploratory survey&lt;/h4&gt;

&lt;p&gt;This test is very simple. We have, binomial, an interviewer and an interviewee. The first one asks some questions on the second one about the context of the tested system.&lt;/p&gt;

&lt;p&gt;For example, in the context of a marketplace, we should ask these questions :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How old are you ?&lt;/li&gt;
  &lt;li&gt;Do you buy frequently online ?&lt;/li&gt;
  &lt;li&gt;What kind of product do you buy online ?&lt;/li&gt;
  &lt;li&gt;What kind of product do you buy only offline ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;attrakdiff&quot;&gt;Attrak’diff&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;strong&gt;AttrakDiff&lt;/strong&gt; questionnaire developed by Hassenzahl and his colleagues in 2003, is a reference tool for researchers in UX. It assesses the hedonic and pragmatic qualities of interactive systems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The tested system was a checkout process in a marketplace project. Depends on the system, the result has to be analyzed.&lt;/p&gt;

&lt;p&gt;For example an e-commerce website selling beauty products should have hedonic qualities and a checkout should have pragmatic qualities. It is a good objective indicator of success for a Scrum project.&lt;/p&gt;

&lt;p&gt;Everybody played the game and answered approximately 30 questions. Example :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Simple | o | X | o | o | o | o | o | Complicated&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;scenario&quot;&gt;Scenario&lt;/h4&gt;

&lt;p&gt;For this user test we prepared a unique scenario in order to compare behavior and make a correlation with the previous tests.&lt;/p&gt;

&lt;p&gt;This time there was a test subject and several observers. They were not to influence the tester, only get his impressions, whether good or bad and help him only if he did not find a way to resolve the scenario.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ux-scenario.jpg&quot; alt=&quot;Workshop&quot; class=&quot;center-block img-fluid&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;review&quot;&gt;Review&lt;/h3&gt;

&lt;p&gt;I was proud to assist to this workshop and to help to organize it.&lt;/p&gt;

&lt;p&gt;On the test results point of view, the team was satisfied of the pragmatism, even if the scenario traces the needs and problems.
On the organizational point of view, the workshop was a real success with the presence of different profiles (students, marketers, developers, psychologists…)&lt;/p&gt;

&lt;h2 id=&quot;web-development&quot;&gt;Web development&lt;/h2&gt;

&lt;h3 id=&quot;smashing-conf&quot;&gt;Smashing conf&lt;/h3&gt;

&lt;p&gt;I’ll write another post to summarize my journey at the Smashing Magazine Conference.&lt;/p&gt;

</description>
        <pubDate>Fri, 06 May 2016 00:00:00 +0200</pubDate>
        <link>http://iscor.me/user-experience-workshop</link>
        <guid isPermaLink="true">http://iscor.me/user-experience-workshop</guid>
        
        <category>user experience</category>
        
        <category>ux community</category>
        
        <category>uxdesign</category>
        
        <category>flupa</category>
        
        
        <category>workshop</category>
        
      </item>
    
      <item>
        <title>From Montpellier to San Francisco</title>
        <description>&lt;h2 id=&quot;objective-california--san-francisco&quot;&gt;Objective California : San Francisco&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the land of the &lt;em&gt;burgers&lt;/em&gt;’ eaters, time plays tricks on &lt;em&gt;me&lt;/em&gt;. One day, &lt;em&gt;I’m&lt;/em&gt; dreaming. The next, &lt;em&gt;my&lt;/em&gt; dream’s becoming reality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fascinated since my childhood by the USA, more particularly the big cities, I am finally able to realize my project and to embark, for months, towards the work destination of my dreams. San Francisco, here I am !&lt;/p&gt;

&lt;h2 id=&quot;hello-san-francisco&quot;&gt;Hello San Francisco&lt;/h2&gt;

&lt;p&gt;I arrived in San Francisco at the beginning of the evening. By the way, I haven’t landed in an unknown place because I’ve already travelled in California in 2013. But it’s always a surprise to see the jungle of skyscraper, the crowded streets.&lt;/p&gt;

&lt;h2 id=&quot;where-i-come&quot;&gt;Where I come&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/map__sfo-mpl.png&quot; alt=&quot;Map from Montpellier to San Francisco&quot; class=&quot;center-block img-fluid&quot; /&gt;&lt;/p&gt;
&lt;legend class=&quot;mark text-xs-center&quot;&gt;Montpellier - San Francisco&lt;/legend&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I’m a french guy and I come from Montpellier, a small city compared to Sacramento, even if it’s a state capital.&lt;/p&gt;

&lt;blockquote class=&quot;post-blockquote&quot;&gt;
  &lt;p&gt;
  Montpellier is a city in southern France. It is the capital of the Languedoc-Roussillon region, as well as the Hérault department. Montpellier is the 8th largest city of France, and is also the fastest growing city in the country over the past 25 years. Nearly one third of the population is students from 3 universities and 3 higher education institutions that are outside the university framework in the city. Located on the south coast of France on the Mediterranean Sea, it is the third-largest French city on the Mediterranean coast after Marseille and Nice.
  &lt;/p&gt;
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Montpellier&quot; target=&quot;_blank&quot; class=&quot;blockquote-author&quot;&gt;Wikipedia&lt;/a&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;web-development-project&quot;&gt;Web development project&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Why am I here in California ?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ve decided to come here in the United States to follow my dreams and also to work in the web development domain. As you can see in my &lt;a href=&quot;/about.html&quot;&gt;bio page&lt;/a&gt;, I am a front-end developer specialized in the JavaScript language.&lt;/p&gt;

&lt;center&gt;
  &lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;New in San Francisco, motivated Web developer... a lot of promise :)&lt;a href=&quot;https://twitter.com/hashtag/SanFrancisco?src=hash&quot;&gt;#SanFrancisco&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/WebDevlopment?src=hash&quot;&gt;#WebDevlopment&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/Javascript?src=hash&quot;&gt;#Javascript&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/Startup?src=hash&quot;&gt;#Startup&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/Web?src=hash&quot;&gt;#Web&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sebastien Correaud (@iTweetScor) &lt;a href=&quot;https://twitter.com/iTweetScor/status/710572331375206401&quot;&gt;March 17, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/center&gt;

&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;

&lt;p&gt;I have many objectives in my career in San Francisco.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To improve my English,&lt;/li&gt;
  &lt;li&gt;to become a full-part member of a JavaScript community,&lt;/li&gt;
  &lt;li&gt;to discover another culture and enjoy life&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I really aim to focus on teaching in the future, to share knowledge about development or about different domains.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/picture__sfo--mini.jpg&quot; alt=&quot;San Francisco break&quot; class=&quot;center-block img-fluid&quot; /&gt;&lt;/p&gt;
&lt;legend class=&quot;mark text-xs-center&quot;&gt;Sunny evening near Levi&#39;s Plaza&lt;/legend&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;javascript-community&quot;&gt;JavaScript community&lt;/h2&gt;

&lt;p&gt;As I said before, I am a front-end developer, even a JavaScript full stack developer. You can discover my projects on &lt;a href=&quot;https://www.github.com/iGitScor&quot;&gt;my Github page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hate enumerate all the frameworks or library I’ve used or I excelled in but I can say that I’m able to develop the back-end and also the front-end part of a website or web application.&lt;/p&gt;

&lt;p&gt;I’ve chosen to focus to &lt;strong&gt;&lt;a href=&quot;https://www.meteor.com/&quot; target=&quot;_blank&quot;&gt;meteor&lt;/a&gt;&lt;/strong&gt; because I like the isomorphic principle. I often develop with &lt;strong&gt;node.js&lt;/strong&gt; as a back-end and &lt;strong&gt;Angular&lt;/strong&gt; as a front-end framework. I also love to create small prototypes in a few days with so many possibilities.&lt;/p&gt;

&lt;p&gt;I love to integrate the fact that all developers should learn concepts, not languages.&lt;/p&gt;

&lt;center&gt;
  &lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;fr&quot; dir=&quot;ltr&quot;&gt;&amp;quot;Apprenez des concepts, pas des frameworks&amp;quot; &lt;a href=&quot;https://twitter.com/hashtag/BlendWebMix?src=hash&quot;&gt;#BlendWebMix&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/javascript?src=hash&quot;&gt;#javascript&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/angularjs?src=hash&quot;&gt;#angularjs&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sebastien Correaud (@iTweetScor) &lt;a href=&quot;https://twitter.com/iTweetScor/status/659305682148196353&quot;&gt;October 28, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
  &lt;cite&gt;(English) Learn concepts, not frameworks&lt;/cite&gt;
&lt;/center&gt;

</description>
        <pubDate>Mon, 28 Mar 2016 00:00:00 +0200</pubDate>
        <link>http://iscor.me/from-montpellier-to-san-francisco</link>
        <guid isPermaLink="true">http://iscor.me/from-montpellier-to-san-francisco</guid>
        
        <category>flight</category>
        
        <category>montpellier</category>
        
        <category>sanfrancisco</category>
        
        <category>javascript community</category>
        
        <category>meteor</category>
        
        
        <category>travel</category>
        
      </item>
    
  </channel>
</rss>
